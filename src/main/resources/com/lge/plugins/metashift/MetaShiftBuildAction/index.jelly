<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:d="jelly:define" 
xmlns:l="/lib/layout" xmlns:t="/lib/hudson" xmlns:f="/lib/form" 
xmlns:c="/charts" xmlns:bs="/bootstrap" xmlns:ms="/metashift" xmlns:sc="/metashift/charts">
  <l:layout title="Meta-Shift Report">
    <st:adjunct includes="com.lge.plugins.metashift.style"/>
    <st:adjunct includes="com.lge.plugins.metashift.tabulator"/>
    <st:adjunct includes="com.lge.plugins.metashift.trend-chart"/>
    <st:adjunct includes="io.jenkins.plugins.bootstrap4"/>
    <st:include it="${it.run}" page="sidepanel.jelly" />
    <l:main-panel>
      <j:set var="qualified" value="${it.metrics.qualified}" />
      <div class="row metashift">
        <h1>${it.run.project.displayName} ${it.run.displayName}</h1>
      </div>
      <div class="row metashift">
        <!-- overview -->
        <h3>Overview</h3>
      </div>
      <div class="row metashift overview">
        <div class="col-2 bg-light shadow-sm panel">
          <h4>Recipes</h4>
          <p>${it.sizeQualifier.recipes}
            <ms:text-diff diff="${it.recipesDiff}" />
          </p>
        </div>
        <div class="col-2 bg-light shadow-sm panel">
          <h4>Lines</h4>
          <p>${it.sizeQualifier.lines}
            <ms:text-diff diff="${it.linesDiff}" />
          </p>
        </div>
        <div class="col-2 bg-light shadow-sm panel">
          <h4>Functions</h4>
          <p>${it.sizeQualifier.functions}
            <ms:text-diff diff="${it.functionsDiff}" />
          </p>
        </div>
        <div class="col-2 bg-light shadow-sm panel">
          <h4>Classes</h4>
          <p>${it.sizeQualifier.classes}
            <ms:text-diff diff="${it.classesDiff}" />
          </p>
        </div>
        <div class="col-2 bg-light shadow-sm panel">
          <h4>Files</h4>
          <p>${it.sizeQualifier.files}
            <ms:text-diff diff="${it.filesDiff}" />
          </p>
        </div>
      </div>
      <div class="row metashift">
        <!-- metric card -->
        <div class="col-5">
          <div class="row">
            <h3>Metrics
              <span class="measurement-group badge ${qualified ? 'badge-success':'badge-danger'}">
                ${qualified ? 'Passed' : 'Failed'}
              </span>
            </h3>
          </div>
          <div class="row">
            <table class="build-table">
              <colgroup>
                <col style="width:5%" />
                <col style="width:20%" />
                <col style="width:10%" />
                <col style="width:10%" />
                <col style="width:5%" />
                <col style="width:5%" />
                <col style="width:5%" />
              </colgroup>
              <tr class="bg-secondary text-white">
                <th colspan="2">Category</th>
                <th colspan="3">Rate</th>
                <th>Thres hold</th>
                <th>Pass Recipe#</th>
              </tr>
              <tr>
                <th rowspan="2">Build Perf.</th>
                <j:choose>
                  <j:when test="${it.cacheQualifier.available}">
                    <th class="${it.cacheQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Cache Availability
                    </th>
                    <td>${it.cacheQualifier.numerator}</td>
                    <td>${it.cacheQualifier.denominator}</td>
                    <td class="${it.cacheQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.cacheQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.cacheThreshold}%</td>
                    <td>${it.cachePassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Cache Availability
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.recipeViolationQualifier.available}">
                    <th class="${it.recipeViolationQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Recipe Violations
                    </th>
                    <td>${it.recipeViolationQualifier.numerator}</td>
                    <td>${it.recipeViolationQualifier.denominator}</td>
                    <td class="${it.recipeViolationQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.recipeViolationQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.recipeViolationThreshold}%</td>
                    <td>${it.recipeViolationPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Recipe Violations
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <th rowspan="7">Code Quality</th>
                <j:choose>
                  <j:when test="${it.commentQualifier.available}">
                    <th class="${it.commentQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Comments
                    </th>
                    <td>${it.commentQualifier.numerator}</td>
                    <td>${it.commentQualifier.denominator}</td>
                    <td class="${it.commentQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.commentQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.commentThreshold}%</td>
                    <td>${it.commentPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Comments
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.codeViolationQualifier.available}">
                    <th class="${it.codeViolationQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Code Violations
                    </th>
                    <td>${it.codeViolationQualifier.numerator}</td>
                    <td>${it.codeViolationQualifier.denominator}</td>
                    <td class="${it.codeViolationQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.codeViolationQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.codeViolationThreshold}%</td>
                    <td>${it.codeViolationPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Code Violations
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.complexityQualifier.available}">
                    <th class="${it.complexityQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Complexity
                    </th>
                    <td>${it.complexityQualifier.numerator}</td>
                    <td>${it.complexityQualifier.denominator}</td>
                    <td class="${it.complexityQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.complexityQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.complexityThreshold}%</td>
                    <td>${it.complexityPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Complexity
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.duplicationQualifier.available}">
                    <th class="${it.duplicationQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Duplications
                    </th>
                    <td>${it.duplicationQualifier.numerator}</td>
                    <td>${it.duplicationQualifier.denominator}</td>
                    <td class="${it.duplicationQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.duplicationQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.duplicationThreshold}%</td>
                    <td>${it.duplicationPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Duplications
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.testQualifier.available}">
                    <th class="${it.testQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Test
                    </th>
                    <td>${it.testQualifier.numerator}</td>
                    <td>${it.testQualifier.denominator}</td>
                    <td class="${it.testQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.testQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.testThreshold}%</td>
                    <td>${it.testPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Test
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.coverageQualifier.available}">
                    <th class="${it.coverageQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Coverage
                    </th>
                    <td>${it.coverageQualifier.numerator}</td>
                    <td>${it.coverageQualifier.denominator}</td>
                    <td class="${it.coverageQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.coverageQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.coverageThreshold}%</td>
                    <td>${it.coveragePassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Coverage
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
              <tr>
                <j:choose>
                  <j:when test="${it.mutationTestQualifier.available}">
                    <th class="${it.mutationTestQualifier.qualified ? 'text-success' : 'text-danger'}">
                      Mutation Test
                    </th>
                    <td>${it.mutationTestQualifier.numerator}</td>
                    <td>${it.mutationTestQualifier.denominator}</td>
                    <td class="${it.mutationTestQualifier.qualified ? 'bg-success' : 'bg-danger'} text-white">
                      ${it.getFixedFloat('#.##', it.mutationTestQualifier.ratio * 100)}%
                    </td>
                    <td>${it.criteria.mutationTestThreshold}%</td>
                    <td>${it.mutationTestPassedRecipes}</td>
                  </j:when>
                  <j:otherwise>
                    <th class="text-muted">
                      Mutation Test
                    </th>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                    <td class="text-muted">--</td>
                  </j:otherwise>
                </j:choose>
              </tr>
            </table>
          </div>
        </div>
        <div class="col-6">
          <h3>Trend</h3>
          <div style="width:100%; height:100%" id="trend-chart"></div>
          <script type="text/javascript">
          {
            const buildAction = <st:bind value="${it}" />;
            renderTrendChart("trend-chart", buildAction)
          }
          </script>
        </div>
      </div>
      <div class="row metashift">
        <div class="col-11">
          <h3>Recipe List</h3>
          <div style="width:100%" id="recipes-table"></div>
        </div>
        <script type="text/javascript">
        {
          const buildAction = <st:bind value="${it}" />;
          renderRecipesTable("#recipes-table", buildAction)
        }
        </script>
      </div>
    </l:main-panel>
  </l:layout>
</j:jelly>